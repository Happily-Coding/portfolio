# Pull an image from docker hub, pull the docker-compose.yml from github,
# run docker compose,
# and clean unused docker elements.
name: alt deploy, pull, run and clean

on:
  workflow_dispatch:

jobs:
  pull_and_run:
    runs-on: [self-hosted, production]
    #Set environmental variables, keep in mind that they will not available by default inside the docker files, unless docker compose assigns them on environment
    env:
      #General
      ENVIRONMENT: production
      DOMAIN: ${{ secrets.DOMAIN_PRODUCTION }}
      PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
      STACK_NAME: ${{ secrets.STACK_NAME_PRODUCTION }}
      #This may be and likely is totally wrong TODO CHANGE:
      BACKEND_CORS_ORIGINS: ${{ secrets.BACKEND_CORS_ORIGINS }}

      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
      USERS_OPEN_REGISTRATION: ${{ secrets.USERS_OPEN_REGISTRATION }}

      #Emails
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      EMAILS_FROM_EMAIL: ${{ secrets.EMAILS_FROM_EMAIL }}

      #Postgres
      POSTGRES_SERVER: ${{ secrets.POSTGRES_SERVER }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      #For docker compose
      DOCKER_IMAGE_BACKEND: ${{ vars.DOCKERHUB_REPOSITORY_BACKEND }}
      DOCKER_IMAGE_FRONTEND: ${{ vars.DOCKERHUB_REPOSITORY_FRONTEND }}
    # Keep in mind i ntheory manually exported variables may not be automatically available to Docker Compose.
    # You would need to manually pass these variables to Docker Compose using the -e option or include them in your .env file or environment section of your docker-compose.yml file.
    steps:
      # Login to docker hub to be able to pull private images.
      - name: Login to DockerHub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      #Pull the docker backend and frontend images, so that docker compose up wont fail even if they are private.
      - name: Pull images
        #If you need to access a private github repository create a github access token use checkout or create an access token and modify wget like this:
        #wget -O docker-compose.yml --header="Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://raw.githubusercontent.com/<username>/<repo>/<branch>/docker-compose.yml 
        #If you are on a private dockehrub repository it might be possible to comment pull, and login to docker hub. since docker compose will automatically pull
        run: |
          docker pull ${{ vars.DOCKERHUB_REPOSITORY_BACKEND }}:${{ github.sha }}
          docker pull ${{ vars.DOCKERHUB_REPOSITORY_FRONTEND }}:${{ github.sha }}

      #Checkout (copy) only docker-compose.yml into worker's folder. See https://github.com/actions/checkout .
      - name: Copy docker Compose
        uses: actions/checkout@v4
        with:
          sparse-checkout:
            docker-compose.yml
          sparse-checkout-cone-mode: false
      
      # The env file is looked for by docker compose. Its used to share variables amongst multiple services.
      # It is overriden by any variables set in environment inside docker compose.
      #- name: Create placeholder .env file
      #  run: |
      #    echo > .env
          
      - name: Create .env file just in case a service looks for the value, and hasnt imported the variable from the environment because it expects it at .env
        run: |
          cat << EOF >> .env
          #General
          ENVIRONMENT=production
          DOMAIN=${{ secrets.DOMAIN_PRODUCTION }}
          PROJECT_NAME=${{ secrets.PROJECT_NAME }}
          STACK_NAME=${{ secrets.STACK_NAME_PRODUCTION }}
          #This may be and likely is totally wrong TODO CHANGE:
          BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}
          
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}
          FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}
          USERS_OPEN_REGISTRATION=${{ secrets.USERS_OPEN_REGISTRATION }}
          
          #Emails
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          EMAILS_FROM_EMAIL=${{ secrets.EMAILS_FROM_EMAIL }}
          
          #Postgres
          POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          
          #For docker compose
          DOCKER_IMAGE_BACKEND=${{ vars.DOCKERHUB_REPOSITORY_BACKEND }}
          DOCKER_IMAGE_FRONTEND=${{ vars.DOCKERHUB_REPOSITORY_FRONTEND }}
          EOF
      

      - name: Run docker compose
        # Try to run docker compose. If an image is missing, error instead of trying to build.
        run: |
          docker compose -f docker-compose.yml up -d --no-build

      - name: Clean up unnecesary docker files
      # This step might seem trivial, or even wasteful, but space used by docker can easily get out of hand and on the cloud its costly.
      # Feel free to remove it, but i discourage it.
      # Remove all stoped containers, all images which are not refrenced by any containers, and all unused docker networks.
      # Note how we dont run docker volume prune since it would be dangerous: if a container crashed and the volume was unused we could delete important information
        run: |
          docker container prune
          docker image prune
          docker network prune
          